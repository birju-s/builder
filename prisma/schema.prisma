// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum MessageRole {
  USER
  ASSISTANT
}

enum MessageType {
  RESULT
  ERROR
}

model Message {
  id        String      @id @default(uuid())
  content   String
  role      MessageRole
  type      MessageType
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  fragment Fragment?
}

/// -----------------------------------------------------------------
///  ConversationTurn:
///  Stores each turn in an iterative conversation so the AI can build
///  context across follow-up requests (“Make the header blue”, etc.)
/// -----------------------------------------------------------------
model ConversationTurn {
  id        String      @id @default(uuid())

  projectId String
  project   Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)

  role      MessageRole /// USER or ASSISTANT
  content   String

  createdAt DateTime    @default(now())

  @@index([projectId, createdAt])
}

model Fragment {
  id        String  @id @default(uuid())
  messageId String  @unique
  message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  sandboxUrl String
  title      String
  files      Json
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Project {
  id   String @id @default(uuid())
  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messages Message[]

  // Deployment preferences
  deployMode DeployMode @default(CPANEL)
}

/// -----------------------------------------------------------------
///  Deployment mode enum – switches between direct cPanel and WHMCS
/// -----------------------------------------------------------------
enum DeployMode {
  CPANEL
  WHMCS
}

/// -----------------------------------------------------------------
///  Stores encrypted credentials (GitHub PAT, cPanel token, etc.)
///  Each user can have at most one credential per provider.
/// -----------------------------------------------------------------
model GitCredential {
  id        String   @id @default(uuid())

  /// Reference to the owner (Clerk userId or internal id)
  userId    String

  /// Provider key, e.g. "github", "cpanel"
  provider  String

  /// Encrypted token / secret (symmetric-encrypted blob)
  encrypted Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, provider])
}

/// -----------------------------------------------------------------
///  Analytics: every significant action (build, deploy, preview, etc.)
///  `amount` can represent seconds, bytes, or “1” for count-based events.
/// -----------------------------------------------------------------
model Analytics {
  id        String   @id @default(uuid())

  userId    String
  projectId String?

  action    String   /// e.g. "build", "deploy", "sandbox-min"
  amount    Int      /// numeric value attached to the action

  createdAt DateTime @default(now())

  /// Optional relations for convenience
  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

/// -----------------------------------------------------------------
///  UsageQuota: tracks remaining allowance for each user per period.
///  Counters can be reset by a scheduled job (e.g. monthly).
/// -----------------------------------------------------------------
model UsageQuota {
  id              String   @id @default(uuid())

  userId          String   @unique

  monthlyBuildCap Int      @default(100)   /// maximum builds allowed per month
  buildsUsed      Int      @default(0)

  storageCapMB    Int      @default(1024)  /// total artefact storage allowed
  storageUsedMB   Int      @default(0)

  resetAt         DateTime                 /// when counters will reset

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}
